/* Media queries Breakpoint mixins */

@mixin for-mobile-layout {
  @media (max-width: $break-narrow) {
    @content;
  }
}

@mixin for-narrow-layout {
  @media (max-width: $break-narrow) {
    @content;
  }
}

@mixin for-normal-layout {
  @media (max-width: $break-normal) {
    @content;
  }
}

@mixin for-wide-layout {
  @media (max-width: $break-wide) {
    @content;
  }
}

@mixin layoutGTC($max) {
  grid-template-columns:
    minmax($layoutPadding, 1fr) minmax(auto, $max) minmax($layoutPadding, 1fr);
}

/* Media  Mixins */

//aspect ratio mixin
@mixin aspect-ratio($width: 1, $height: 1) {
  position: relative;
  overflow: hidden;

  &:before {
    content: "";
    display: block;
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  >* {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }

  >img {
    height: 100%;
    object-fit: cover;
  }
}

// Mixin for removing hover efects on iphone screen
@mixin hover-supported {
  @media not all and (pointer: coarse) {
    &:hover {
      @content;
    }
  }
}

// Buttons

@mixin btn($type: regular, $bg: $clr1, $clr: $clr3, $padding: em(20px) em(40px), $hover: darken($bg, 8%)) {
  text-decoration: none;
  border-radius: 2em;
  padding: $padding;
  font-size: rem(11px);
  font-weight: 500;
  font-family: $title-font;
  margin: .3rem;
  border: none;
  cursor: pointer;

  transition: background-color 0.2s;

  @if $type ==regular {
    background-color: $bg;
    color: $clr;

    &:hover {
      background-color: $hover;
    }
  }

  @else if $type ==dark {
    background-color: $clr2;
    color: $clr3;

    &:hover {
      background-color: $clr1;
      color: $clr3;
    }
  }

  @else if $type ==light {
    background-color: $clr3;
    color: $clr2;

    &:hover {
      background-color: $clr1;
      color: $clr3;
    }
  }
}

@mixin input {
  padding: .3em;
  padding-inline-start: 0.7em;
  font-size: rem(16px);
  border-width: 1px;
  border-color: $clr1;
  // background-color: $clr1;
  color: $clr3;
  border-style: solid;
  border-radius: 4px;
  box-shadow: 0px 0px 4px rgba(66, 66, 66, .46);
  text-shadow: -50px 0px 0px rgba(66, 66, 66, .0);
  padding: 4px 8px;
  height: 30px;


  &::placeholder {
    color: $clr3;
  }
  
  &:focus {
    outline: none;
    color: $clr1;
  }
}

// Type

@mixin type($type: bold) {

  // type options: 
  // 1.bold 
  // 2.boldCondensed 
  // 3.condensed
  @if $type ==bold {
    font-variation-settings: "wght" 430;
  }

  @else if $type ==boldCondensed {
    font-variation-settings: "wght" 430, "wdth" 80;
    letter-spacing: em(6.72px);
  }

  @else if $type ==condensed {
    font-variation-settings: "wdth" 80;
    letter-spacing: em(6.72px);
  }

  @else if $type ==light {
    font-variation-settings: "wght" 200;
  }
}

@mixin checkBox($clr1, $clr3) {
  input[type="checkbox"] {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    width: 20px;
    height: 20px;
    border: 2px solid #333;
    border-radius: 4px;
    outline: none;
    cursor: pointer;
    position: relative;
    background-color: $clr1 ;

  }

  input[type="checkbox"]:checked::after {
    
      content: "âœ”";
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 16px;
      color: $clr3;
  }
}